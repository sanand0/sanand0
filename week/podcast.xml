<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
  <title>Anand's Weekly Codecast</title>
  <link>https://github.com/sanand0/sanand0</link>
  <description>Weekly audio summaries of Anand's commits to GitHub.</description>
  <lastBuildDate>Sun, 20 Jul 2025 12:45:35 GMT</lastBuildDate>
  <item>
    <title>Week of 2025-07-20</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-07-20.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-07-20.mp3</guid>
    <pubDate>Sun, 20 Jul 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 20 Jul 2025!

Maya: We’re Alex and Maya, and today we’ve got some exciting updates on Anand’s projects that mix AI, data, and handy tools.

Alex: Let’s dive right in! First up, we’re exploring some fresh updates in a collection of handy little web apps mostly crafted by language models.

Maya: The big highlight this week is a new tool called Recall. It’s designed to help you with spaced repetition using your own Markdown notes.

Alex: Interesting! So, how does Recall work exactly?

Maya: It pulls list items from Markdown files and uses an exponentially decaying probability to pick what you review next.

Alex: That sounds like a smart way to keep important stuff fresh without overwhelming yourself. Why does the decay factor matter?

Maya: It ensures newer notes appear more often, while older ones gradually fade, optimizing your memory retention over time.

Alex: What about the user interface?

Maya: Recall’s UI got a makeover to work smoothly on mobile – neat controls, smaller buttons, and even a clickable title that picks a new item.

Alex: The fact that it uses Markdown files means it’s super flexible for users to maintain their own note collection.

Maya: Exactly, and it integrates with Anand’s extensive notes like those from things learned or large language model notebooks.

Alex: Cool! Now, also in the same suite, there’s an upgrade to an app named Daydream.

Maya: Yes! Daydream lets you browse creative ideas generated by AI, mixing concepts and goals into radical new proposals.

Alex: I saw that the viewer now supports better searching and sorting with fuzzy search. How does it improve the experience?

Maya: It helps you quickly find relevant ideas by keywords or filter by score categories like novelty or feasibility.

Alex: And it got a fresh responsive layout with clearer navigation between idea lists and details.

Maya: Plus, the tool now shows detailed ratings and explanations for each idea’s scores—perfect for deep insight.

Alex: These additions make Daydream much more approachable for exploring and rating AI-generated creative sparks.

Maya: One more thing about the scripts behind these apps—the daydream generator now supports passing in a goal and multiple concepts.

Alex: So you can tailor the generated ideas to specific themes, making it more relevant?

Maya: Yes, it builds a prompt incorporating those goals and concepts to get a richer, focused output from the language model.

Alex: And Recall, on the scripting front, was improved to also include notes from a special folder with personal notes, right?

Maya: Correct! This inclusion broadens the pool of notes for Recall, making it even more comprehensive.

Alex: Switching gears, Anand also added some GitHub workflows around Claude, the AI assistant, for pull request help and code reviews.

Maya: That’s right. The workflows let Claude automatically comment on issues or review code on PRs, helping maintain code quality and consistency.

Alex: It’s like an AI teammate assisting in your developer flow—reducing manual overhead.

Maya: Plus, the setup is well controlled with permissions and customizable prompts to guide Claude’s behavior.

Alex: Finally, for something a bit different, Anand updated a talk on “Goodbye MBA, Hello AI” including video and transcript.

Maya: That talk explores how AI is reshaping the business world and how students can prepare for an AI-driven future.

Alex: All in all, a rich blend of tools, automation, and insights this week.

Maya: Before we wrap, here’s a quick tip related to Recall: Adjusting the decay factor can finely tune how often you see new vs older notes.

Maya: Alex, how would you experiment with that in your own learning?

Alex: I’d start with a small decay to focus on newer ideas but bump it up occasionally to revisit older, foundational concepts—keeps the balance right.

Maya: Great approach! Remember listeners, small tweaks like that can amplify your study effectiveness.

Alex: Also, don’t forget to explore the tooling options that Anand offers. A good tool can speed up your workflow and enhance creativity.

Maya: That’s all for this week on Anand’s Weekly Codecast.

Alex: See you next time!
]]></description>
  </item>
  <item>
    <title>Week of 2025-07-13</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-07-13.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-07-13.mp3</guid>
    <pubDate>Sun, 13 Jul 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 13 Jul 2025!

Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: Looks like it was a quiet week—no new commits to talk about!

Maya: True, but sometimes no news is good news, right? It means the projects are stable and humming along smoothly.

Alex: Absolutely. It’s a chance to reflect on past changes and maybe fine-tune our own workflows.

Maya: Speaking of which, here’s a quick tip you can try today: regularly reviewing your code history helps you spot patterns and avoid repeating mistakes.

Alex: Great advice! I like to revisit old commits to understand how my thinking has evolved. How would you use that tip, Maya?

Maya: I’d set aside a little time each week to skim through past changes. It keeps context fresh and inspires improvements.

Alex: Perfect. Remember, small tweaks can have big impact.

Maya: Don’t forget to check out your tooling options to help automate that review process.

Maya: That’s all for this week on Anand’s Weekly Codecast.

Alex: See you next time!
]]></description>
  </item>
  <item>
    <title>Week of 2025-07-06</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-07-06.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-07-06.mp3</guid>
    <pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 06 Jul 2025!  
Maya: We’re Alex and Maya, excited to dive into the highlights from Anand’s latest commits. Let’s get started!

Alex: First up, a fascinating project that analyzes research papers to spot emerging trends across multiple scientific fields.  
Maya: This tool uses AI to categorize arXiv papers by topics and creates eye-catching visual charts showing how those topics evolve over time.  

Alex: What’s cool is how it harnesses semantic similarity models to classify papers, making it easier for researchers and publishers to track hot new areas.  
Maya: Exactly! Instead of manually sifting through thousands of papers, this AI-powered system highlights key topic trends, which saves so much time and uncovers fresh insights.  

Alex: And the update this week was all about polishing the documentation and licensing, which might seem small but is crucial for clarity and proper open-source use.  
Maya: Right, having clear instructions and open licensing lets more people adopt and build on the tool confidently. It’s a foundation for collaboration and growth.

Alex: Next, let’s switch to a chatbot assistant for databases. The latest improvements let users directly edit the system prompt, making it more flexible.  
Maya: That’s a big win! It means people can customize how the AI interprets their questions or commands, tailoring the chatbot to their unique needs.  

Alex: Also, they optimized memory use by no longer creating tables entirely in memory. That improves efficiency, especially with large datasets.  
Maya: Efficiency matters a lot for users who run complex queries. Less memory overhead means the bot can handle more tasks smoothly.

Alex: Moving on, there’s an update for a lightweight API proxy service that lets anyone access OpenAI or OpenRouter APIs with minimal cost.  
Maya: Yes, this backend tool is great for front-end developers who want easy access to language models without managing keys or billing mess.  

Alex: The key update was adding a linter tool called OXLint and fixing request proxying details to make the code cleaner and more stable.  
Maya: Keeping the proxy code robust is important because it affects so many users. Plus, small fixes like stripping unsafe headers ensure more secure API calls.  

Alex: Over at Anand’s generative AI group podcaster, the podcast script was updated with new dialogue from recent group chats.  
Maya: This project turns WhatsApp group transcripts into engaging two-host podcast scripts and audio, which is such a creative way to recycle conversations.  

Alex: The new commits added nearly 100 lines of conversation, reflecting fresh discussions around AI agents and automation tools.  
Maya: For the listeners, it means getting a vibrant weekly summary of emerging AI talks, packaged as a friendly back-and-forth discussion.

Alex: Another update we saw was from Anand’s personal notes repository — weekly things learned.  
Maya: The notes are always a goldmine of interesting tech tips and reflections. This week’s batch included insights on vertical AI and GitHub’s container registry.

Alex: Also, a practical highlight was updating screen recording scripts with FFmpeg, including commands for low-frame-rate captures and audio normalization.  
Maya: Those handy shortcuts make it easier for people to create quality screencasts without heavy CPU load—a win for productivity.

Alex: Lastly, let’s talk about a major new feature in Anand’s ChatGPT conversation converter tool.  
Maya: Oh yes, the newly added thinking time analysis! It’s a tool that looks at exported ChatGPT conversations and calculates how long the AI spends “thinking” or generating responses.  

Alex: This is a subtle but powerful feature. It digs into the metadata to measure actual model generation time, not just wall-clock time, giving a realistic picture of how long reasoning takes.  
Maya: And that helps users or researchers understand the AI’s performance patterns, spotting slowdowns or long reasoning chains in their chats.

Alex: They made it runnable via npx as a standalone executable, complete with detailed tests and documentation. Such polish really helps adoption.  
Maya: Plus, the stats it generates include total thinking time, frequency of thinking blocks, and even excerpts of the questions that triggered long responses—a deep dive for the curious.

Alex: Wow, it’s amazing to see these projects blend data science, practical tooling, and AI to empower users and researchers alike.  
Maya: Absolutely! It’s all about making complex AI workflows accessible and insightful.

Maya: Here’s a quick tip you can try today: When working with large API proxy or chatbot services, always sanitize your headers and limit memory usage to keep things responsive.  
Alex, how would you use that in your own projects?

Alex: Great question! I’d prioritize these best practices early in development to avoid nasty performance bottlenecks and security risks. They save so much debugging time later.

Alex: To wrap up, remember that thorough documentation and testing can turn good tools into great, trusted projects.  
Maya: And small, thoughtful improvements — like editable prompts or clever analysis tools — multiply their impact over time.

Maya: That’s all for this week on Anand’s Weekly Codecast.  
Alex: See you next time!
]]></description>
  </item>
  <item>
    <title>Week of 2025-06-29</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-29.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-29.mp3</guid>
    <pubDate>Sun, 29 Jun 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 29 June 2025!

Maya: We’re Alex and Maya, thrilled to walk you through the latest highlights from Anand’s GitHub commits this week.

Alex: First up, we’re diving into Anand's talks repository, filled with fresh presentations and insights from the VizChitra 2025 data visualization conference.

Maya: This week’s big change is all about turning raw data into compelling visual stories with Large Language Models, or LLMs.

Alex: Anand added detailed slides and transcripts for his “Prompt to Plot” workshop, showing how to use LLMs to craft beautiful data visualizations, even for mixed audiences.

Maya: What’s fascinating is the hands-on approach — finding datasets, ideating analysis, generating visualizations, and publishing everything online — all driven by AI prompts.

Alex: Right, and he even layered in tactics like giving up quickly if something doesn’t work and moving on, which is a fresh take on coding by AI.

Maya: That reminds me — how does this help someone who isn’t a data expert?

Alex: Great question! The idea is that you don’t need deep coding skills anymore. You basically talk to the AI, it writes the code, and you get a finished visualization.

Maya: So it's democratizing data storytelling. I love how Anand included QR codes for easy access to workshop resources too.

Alex: Next, we have a new data visualization project called BooksViz, showcasing analysis of the Goodreads 100K books dataset.

Maya: Yes! This is exciting — Anand created an interactive scatter plot visualization powered entirely by LLM-generated code.

Alex: He didn’t just stop at making pretty charts, though. The updates refined the article layout into a full-fledged data story, with clear text, key findings, and methodology.

Maya: And the data handling got smarter — filtering out outliers, sampling the data for quick loading, and adding interactive tooltips that explain each data point.

Alex: I found the Python preprocessing script especially neat. It trims out extreme values to focus on meaningful trends and generates a lightweight JSON file for the web.

Maya: A practical trick for anyone dealing with big data visuals — you want to load a manageable subset that tells the real story without lag.

Alex: To wrap up the visualization updates, the D3.js charts now have smooth trendlines and improved aesthetics with custom fonts and color themes, making the whole experience lively and accessible.

Maya: It’s like turning raw numbers into a narrative that anyone can understand and explore interactively.

Alex: Moving on, Anand also polished his personal notes repository where he chronicles things learned weekly.

Maya: He switched from using LLM Foundry to directly integrating OpenAI, which should streamline embedding calculations and similarity scoring in his “Things I learned” process.

Alex: That means enhanced efficiency and control when tagging topics or finding related notes – making his personal knowledge base smarter.

Maya: Plus there’s better error handling and automated formatting on updates, keeping those notes neat and reliable.

Alex: Another neat update was improving various little web tools like Excel to JSONL converters and Markdown to CSV utilities.

Maya: Did you notice the universal switch to using native clipboard API calls? That modernizes these tools and avoids older, unreliable commands.

Alex: Right, making interactions smoother and more compatible across browsers.

Maya: Also, more robust test cases and linting with oxlint improve code quality, making these handy apps more dependable.

Alex: Finally, in his dark theme toggle library for Bootstrap, Anand simplified integration by letting users add a small placeholder div to activate the toggle automatically.

Maya: That’s a usability win — no more copy-pasting large toggling HTML. Just drop a div with a specific class in your navbar, and the dark mode toggle appears.

Alex: Plus, they updated the CDN usage, so you can just link to a shorter URL to get the full functionality immediately.

Maya: It’s all about lowering friction for developers to add modern features like theme switching, improving the user experience with minimal effort.

Alex: Wow, so many fresh improvements that make data, UI, and personal knowledge work better and smarter.

Maya: Before we go, here’s a quick tip inspired by the chat analysis tools Anand’s explored: If you work with lots of chatbot sessions, try clustering similar queries to spot common topics or pain points.

Maya: Alex, how would you use that?

Alex: I’d integrate clustering outputs with dashboards that visualize trends over time, helping prioritize fixes and new features based on what users repeatedly ask.

Maya: Nice! That adds a smart feedback loop to improve bots continuously.

Alex: And I’ll say, remember, clear data storytelling and streamlined tooling go hand in hand to make complex information approachable.

Maya: Don’t forget, investing in your personal knowledge workflows makes all the difference in staying sharp and informed.

Maya: That’s all for this week on Anand’s Weekly Codecast.

Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-06-22</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-22.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-22.mp3</guid>
    <pubDate>Sun, 22 Jun 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 22 Jun 2025!  
Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: Let’s kick off with a deep dive into a fascinating data project—Indian High Courts judgment analysis.  
Maya: Yeah, Anand unpacked a massive dataset: 16 million judgments from 25 Indian High Courts, about 1TB of data. Can you imagine?  
Alex: That’s huge! What’s the goal here?  
Maya: To explore court efficiency differences, seasonal justice patterns, and political cases like the UAPA bail delays.  
Alex: That’s like bringing hard data to courtroom stories—how quickly cases are resolved, how courts seasonally slow down, and where bail is systematically delayed.  
Maya: Exactly, and the data is meticulously structured in Parquet files on S3, neatly partitioned by year, court, and bench, which is great for running efficient SQL queries directly on the cloud.  
Alex: Non-technical terms: Anand processes millions of legal decisions to find patterns—like which courts clear cases faster or how justice delivery changes during vacations.  
Maya: He also investigated constitutional case surges and how bench sizes impact case clearance rates.  
Alex: Oh! Like if more judges mean faster decisions and lower backlogs?  
Maya: Right, plus a special deep look into terror case bail hearings, showing repeated delays for accused under anti-terror laws with bail pushbacks stretching for months.  
Alex: That matters because it reveals justice bottlenecks and possible human rights concerns hidden in dense legal data.  
Maya: And Anand didn’t stop at analysis—he scripted full DuckDB queries and packages results into CSVs for journalistic insights, making it accessible for data reporters.  
Alex: I love that—making such huge, complex data transparent and meaningful is no small feat.

Maya: Next up, let’s talk about the revamped “Hypothesis Forge” — that smart app for hypothesis generation and data testing.  
Alex: Yes! This week’s update added CSV file upload support right in the browser interface.  
Maya: So now you can instantly preview your own CSV data in a scrollable table before generating hypotheses. No need to stick with canned datasets!  
Alex: Plus, users can now write or edit an “Analysis Context” — a short description of their problem or objective — that tailors how hypotheses are generated.  
Maya: That’s a neat way to move from a black box to interactive, guided analysis. You tell it what you want, and the system tries to find relevant hypotheses and test them.  
Alex: The UI got tighter too—replaced a bulky grid of demos with a compact dropdown, saving space and making it easier to pick datasets.  
Maya: I’m curious, Alex: how do you think previewing data prior to analysis changes the user experience?  
Alex: It builds trust—users know what the data looks like, so they’re less likely to get surprised by strange results. Plus, it confirms data loaded correctly. Data scientists will appreciate that!  
Maya: It’s like the difference between blindfolded guesswork and informed exploration.

Alex: Shifting gears, the “LLM Demos” collection got a bunch of fresh interactive AI tools added this week.  
Maya: Oh yes, including the “AI Pipe” — a serverless LLM workflow builder using any OpenAI-compatible API.  
Alex: That’s huge because it lets devs craft AI pipelines without managing backend infrastructure.  
Maya: There’s also “BSToast,” a tiny library for stylish Bootstrap toast notifications replacing old alert popups—modern and sleek!  
Alex: Got to love neat UI improvements.  
Maya: Then some powerful AI-enhanced tools for building decision trees emerged: “Decision Tree Builder” and “DTGen.”  
Alex: Both help visualize and edit decision trees right in the browser, one with advanced AI assistance. This is great for understanding complex data splits without writing tons of code.  
Maya: Several other updates include LinkedIn automation, sentiment analysis, data quality evaluation via LLM-powered Python, and compliance document analysis with PDF uploads.  
Alex: This demo list shows how AI is seeping into different niches—from data cleaning to HR to automated job applications.

Maya: Speaking of dev tooling, there’s a cool new command into the “scripts” setup called `pyrun`.  
Alex: I heard! It’s amazing — you give it a natural language prompt, it uses an LLM to write a concise Python script, then runs it immediately.  
Maya: So it’s like telling your computer what to do in plain English and getting Python code executed right away.  
Alex: I’m thinking how handy this is for quick data transformations or scraping tasks without switching context or manually writing code.  
Maya: Definitely a productivity booster! And they also added a `record` command — it records mic and system audio to `.opus` with noise reduction. Superb for easy podcast prep or voice notes.  
Alex: That fits nicely with all the audio-driven tools Anand’s building.

Maya: On the “Tools” repository, they enhanced the Google Suggest tool with something pretty neat—an editable system prompt for the AI explanations.  
Alex: So users can now personalize the AI’s tone and style when it interprets Google suggestions?  
Maya: Exactly! And they added a copy button to quickly copy the AI’s explanation output.  
Alex: That’s a small detail but makes a big difference in user workflow.  
Maya: Plus, there’s a split “Explain This” button — one regular and one “No Cache” option. That’s great to force fresh explanations instead of cached ones.  
Alex: User control and transparency all the way—our favorite kind of update.

Alex: The “API Agent” project is also polishing up! The API selection UI moved into a sticky side accordion menu.  
Maya: Right, improving navigation with collapsible sections, highlighting active APIs for better clarity.  
Alex: Now instead of bulky cards, it’s a clean sidebar with easy expansion and token input.  
Maya: This aligns with how you’d want to quickly switch between API sets without losing place—pretty practical enhancement.  
Alex: Also, they added support for GitLab APIs along with detailed usage examples, expanding beyond just GitHub and StackOverflow.  
Maya: And Dropbox API support was introduced, perfect for managing files remotely through natural language queries.  
Alex: This suite is genuinely making multi-API querying more accessible and fluid for both devs and analysts.

Maya: Finally, there was a big update to “Data Stories” with new entries for employment trends and horoscope contradictions.  
Alex: The horoscope story used deep research to gather and analyze contradictory predictions from multiple Indian media sources — an example of blending LLMs with journalistic curiosity.  
Maya: The employment trends story shows US sector growth changes since 1980—some sectors doubling, some shrinking.  
Alex: Plus, on the backend, the story links were refactored to be more flexible, supporting external or relative URLs.  
Maya: This means the site can easily blend internal and external data stories, improving navigation and content sharing.  
Alex: A smooth user experience for exploring diverse data narratives is key for these modern data journalism sites.

Maya: Here’s a quick tip you can try today: If you’re using any LLM-powered tool, customize the system prompt to fit your context or style.  
Alex: That’s great! Changing the system prompt lets you adjust the AI’s personality and focus, bringing more relevance and clarity.  
Maya: And since many tools are now letting you edit this directly, it’s never been easier to experiment.  
Alex: I’ll totally start crafting my own prompt templates for different tasks. Makes the automation even smoother.

Alex: To wrap up, I’ll say: Remember, small tweaks like enabling file uploads or adding context inputs can unlock huge usability gains.  
Maya: And I’ll add: Don’t hesitate to personalize your AI interactions with prompt editing and UI improvements—the better the input, the better the insight!  
Maya: That’s all for this week on Anand’s Weekly Codecast.  
Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-06-15</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-15.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-15.mp3</guid>
    <pubDate>Sun, 15 Jun 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 15 Jun 2025!  
Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: First up, let’s talk about the data science course materials Anand maintains.  
Maya: There was a big update to the official course, including a new tutorial on preparing data with DuckDB.  
Alex: DuckDB is becoming quite popular for handling large data files locally, right?  
Maya: Exactly! Anand added examples showing how to create sample datasets, handle messy CSV files, and do exploratory data analysis—all with DuckDB’s SQL CLI.  
Alex: That’s super practical. Having hands-on guides like this helps learners handle real-world data that’s often messy or huge.  
Maya: And they included advice on memory-efficient processing, converting data to multiple formats like JSON or Parquet, and working with corrupted CSV files without crashing.  
Alex: Great for students to grasp not just code, but practical challenges in data work.

Maya: Alongside that, the course timelines were revised.  
Alex: Yes, they adjusted dates for projects and graded assignments, keeping everything clear for the students.  
Maya: Keeping course info up to date helps everyone stay on track, especially with multiple moving parts like online exams and graded assignments.

Alex: Next, in the data visualization realm, a new employment trends story was added.  
Maya: It’s a full interactive visualization with detailed insights.  
Alex: These data stories make complex data more engaging and understandable.  
Maya: It’s probably a great way for students or data enthusiasts to see real examples of telling stories with data.

Alex: Turning to tools, several handy utilities saw improvements.  
Maya: The page-to-markdown tool was enhanced to better handle SVG images and clean up links from ChatGPT pages.  
Alex: That means users can now copy web content more reliably into Markdown for notes or blogs.  
Maya: Yes, especially for technical and rich-content pages, better SVG support is a subtle but impactful upgrade.

Alex: A big new feature is in the API Agent—Anand upgraded it to handle multiple API tokens and support selecting multiple APIs.  
Maya: That sounds super useful for anyone querying multiple services in one place.  
Alex: Right, for instance, using both GitHub and StackOverflow tokens at once, and the interface now lets users toggle APIs on and off dynamically.  
Maya: Plus, they improved OAuth token input management and added robust error handling for live LLM responses.  
Alex: All these changes make the API Agent smoother and more versatile for complex queries.

Maya: Another cool new tool is the Google Tasks Exporter.  
Alex: It lets you sign in, fetch your Google Tasks, export them as CSV, copy to Excel or Markdown, and even delete completed tasks.  
Maya: Storing the access token locally means you don’t have to sign in repeatedly.  
Alex: Handy for managing your to-do list data outside Google’s interfaces, especially if you want detailed reports.

Maya: Also, in the Web Apps collection, a new “Join CSV Tables” tool was added.  
Alex: You can paste multiple CSVs separated by blank lines, pick your delimiter, and merge them on the first column—like a lightweight local database join.  
Maya: That’s perfect for quick merges or combining data from separate exports without complex software.  
Alex: And for Markdown users, a Markdown table to CSV converter was added.  
Maya: So you can extract a table from Markdown text, clean links and images, and download it as CSV for analysis.  
Alex: All these tools simplify common data wrangling steps that many struggle with manually.

Maya: Lastly, there’s an amazing ambition with the LLM Fill-in-the-Blank tool.  
Alex: You type a sentence, click on a word to blank it, and see how different language models predict the missing word with log-probability scores.  
Maya: It’s like peeking inside the model’s thought process, which is great for learning and understanding model behavior.  
Alex: The tool supports various models, with online API keys and live streaming responses.  
Maya: It also recently got a comparison tab to see two sentences side by side, helping with nuanced evaluation.

Alex: Wow, that was packed! What do you think makes these changes so meaningful for Anand’s audience?  
Maya: I love how these updates bridge theory and practice—from teaching with real tools to building practical utilities and exploratory AI apps. They’re thoughtful and impactful.

Maya: Here’s a quick tip you can try today: When merging tables or exporting data from complex sources, consider using simple web-based tools like the new CSV joiner or Markdown-to-CSV converter. It saves a lot of manual cleanup time.  
Alex: Great tip! I’d add that for interactive data analysis, DuckDB’s CLI approach with practical tutorials can fast-track your ability to handle messy, large datasets. How would you use these in a project?

Alex: My key takeaway this week is: small improvements in tooling can dramatically improve productivity and workflow.  
Maya: And I’d add: clear, up-to-date course materials with real-world context empower learners to build solid foundations.

Maya: That’s all for this week on Anand’s Weekly Codecast.  
Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-06-08</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-08.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-08.mp3</guid>
    <pubDate>Sun, 08 Jun 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 08 Jun 2025!

Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: First up, let’s dive into the AI Pipe project—a backend service that lets you access OpenAI or OpenRouter APIs easily, even without your own backend.

Maya: The big update here is the addition of a new proxy feature. Now you can request any URL through AI Pipe’s `/proxy/` endpoint, which bypasses CORS restrictions.

Alex: That’s a game changer! No more browser CORS jokes when fetching external data for your front-end apps.

Maya: Exactly. And they made sure security isn’t compromised by stripping unsafe headers on both request and response sides.

Alex: They also split the playground JavaScript into its own module… Why do you think that helps?

Maya: It improves code readability and makes it easier to maintain, plus it simplifies loading scripts asynchronously.

Alex: Anand also added linting to run automatically before publishing the package, so the code style stays consistent—small but crucial for long-term health!

Maya: Another tweak: they fixed a subtle bug where URL search parameters were being dropped incorrectly after logging in. This preserves important query info for users.

Alex: Cool! Speaking of AI Pipe, they’ve enhanced their LLM interacting app—now you can customize the number of retry attempts for API calls and even continue ongoing conversations with a “Continue” button.

Maya: That means if the AI’s first answer isn’t perfect, you don’t have to start from scratch. It’s like having a patience knob for your AI assistant.

Alex: Switching topics, in the API Agent fully interactive app, they added a Google Workspace agent with OAuth support. So now you can query Gmail, Calendar, and Drive via natural language!

Maya: That’s huge. People can now ask, “What’s on my calendar tomorrow?” and get real-time answers. It automatically handles OAuth tokens elegantly too.

Alex: Plus, you can save your API tokens in the form and they persist across reloads, thanks to better saveform integration.

Maya: Speaking of saveform, the library itself got a nice upgrade. Now when you save a form, it merges stored values rather than overwriting everything.

Alex: So if your form dynamically changes and some fields get removed, it won’t lose their values from storage—that’s clever!

Maya: There was also a handy new code snippet added to scripts: an “unbrace” abbreviation that removes braces from single-line JS blocks to tidy up your code.

Alex: Super handy for quick refactoring or simplifying then/else chains.

Maya: Moving over to the tools collection, Anand added a fantastic new SpeakMD tool.

Alex: That’s the one that converts Markdown into a friendly, conversational script for audio narration, right?

Maya: Yes! It streams the output using LLMs, so you can see the text appear live, and then you can copy it or even have it read aloud via speech synthesis.

Alex: A great tool if you want to quickly generate podcast scripts or make your docs audio-friendly.

Maya: Also, the Google Suggest Explorer tool got a big UX refresh—search suggestions now appear in cards per country with clickable links, and the app can explain differences between countries using LLMs.

Alex: They made the LLM prompt smarter too—asking specifically for outliers or unique perspectives from countries, which makes the AI output more insightful and fun.

Maya: Nice! And the explorer also supports search history with delete-ability, making it easier to track and manage frequent queries.

Alex: Let’s not forget the new Hacker News Links Extractor! It scrapes article links from various Hacker News sources and outputs Markdown-readable lists.

Maya: Yes, it fetches HTML via a proxy, parses out relevant article links, and even sanitizes the link text for Markdown formatting.

Alex: That makes consuming Hacker News content far more convenient for knowledge aggregation or reading later.

Maya: Last but not least, the AWS RAG project was enhanced with a full CLI and API interface. You can now index documents, perform hybrid semantic and keyword searches, and run a production-ready FastAPI server.

Alex: Retrieval-augmented generation systems like this combine vector search with traditional keyword search to boost accuracy—a neat evolution from regular RAG.

Maya: Plus, the tool supports neat features like chunking huge documents, query rewriting, and generating sub-questions plus HyDE techniques for better context.

Alex: Super comprehensive! So many great updates across all these projects.

Maya: Here’s a quick tip you can try today: when saving form data in the browser, merge new values with existing ones instead of overwriting everything. This preserves user inputs even if your form dynamically changes.

Alex: That’s fascinating! I’d use that in multi-step forms or where fields appear/disappear dynamically—so users don’t lose data unexpectedly.

Maya: Exactly. Enhancing user experience by being forgiving about form changes makes your app feel thoughtful and reliable.

Alex: Remember, small tweaks can have big impact.

Maya: Don’t forget to check out your tooling options—the right library or pattern can save you hours.

Maya: That’s all for this week on Anand’s Weekly Codecast.

Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-06-01</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-01.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-06-01.mp3</guid>
    <pubDate>Sun, 01 Jun 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 01 June 2025!

Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: First up, let’s talk about the big updates in the comprehensive data science course content!

Maya: Right! Anand updated the course notes to fix relative links for the May 2025 Project 1. It’s a small but crucial detail.

Alex: Absolutely. Correct links help students navigate contents smoothly and avoid confusion.

Maya: Plus, the Jan 2025 content now consistently uses the Jan 2025 sidebar, improving navigation experience across modules.

Alex: You know, attention to details like sidebar consistency reflects good maintenance habits in large documentation projects.

Maya: And there was a neat fix moving the virtual Teaching Assistant project images to a proper folder, which improves asset management.

Alex: Speaking of teaching assistants, keeping media organized helps reduce broken images and offers a polished learning interface.

Maya: Next, let’s dive into the brand new Bootstrap dark theme module Anand created!

Alex: Yes! He released a Bootstrap 5 light/dark theme toggle button that seamlessly integrates in the navbar.

Maya: What’s really thoughtful is treating unknown theme values as 'auto', which gracefully defaults to the system preference.

Alex: That’s key for robust user experience—avoiding theme glitches when someone tries an unsupported option.

Maya: He even added a full test suite in JavaScript with simulated browser environments to catch issues early.

Alex: This shows the power of incorporating automated UI tests for even seemingly simple features to keep them reliable.

Maya: There’s a new example HTML file showing exactly how to add the toggle, making it super easy to implement.

Alex: This kind of ready-to-use example code saves developers from guesswork and encourages wider adoption.

Maya: Moving on, in the tools repository, Anand enhanced the JSON to CSV converter.

Alex: It now automatically detects whether your input JSON is a single object or an array, so you no longer have to specify the type yourself.

Maya: That’s user-friendly! It reduces friction for people who may not know the exact JSON format they have.

Alex: Also, the converter preserves the order of keys exactly as they appear in the input.

Maya: That’s so important since CSV consumers often expect a consistent column order that reflects the input data.

Alex: Anand removed the dropdown UI for input type, streamlining the experience for quick conversions.

Maya: Great example of simplification without losing any power. It’s smoother and smarter.

Alex: The GitHub User Data Extractor tool got a major makeover too!

Maya: Yes! Now it accepts just usernames with or without "@" as well as full profile URLs, plus GitHub Pages URLs.

Alex: And he clearly documented what fields get displayed and exported, emphasizing key user info like name, bio, company, repos, and formatted dates.

Maya: Speaking of formatting, numbers have thousands separators and dates adopt a readable style like "Wed, May 28, 2025."

Alex: What’s great is clickable links for profile URLs, blog sites, email addresses, and even Twitter handles.

Maya: Plus, avatars show as small, round images right inside the data table.

Alex: And you can download the data as CSV or copy it formatted for Excel with handy buttons.

Maya: This tool went from rough to polished, making querying GitHub user data accessible for analysis or reporting.

Alex: It’s impressively thorough — even includes manual testing instructions to help verify everything works as intended.

Maya: Now, switching gears to the brand new topic trends repository.

Alex: Anand created this to track how research topics evolve over time using deep analysis and LLMs.

Maya: The latest update adds a cool feature to interpret the trends using natural language explanations produced by large language models.

Alex: So you get a human-friendly summary explaining which topics are rising or falling and why that matters.

Maya: They even included a UI text area for you to customize the interpretation prompt and a button to generate the explanation.

Alex: Plus, the interpretation result is nicely rendered from Markdown to HTML for easy reading.

Maya: This is super useful for non-technical folks — it bridges complex data visualizations with actionable insights.

Alex: How do you think this language-based interpretation helps researchers or policy makers?

Maya: It unlocks trend understanding without deep technical skills, speeding up decision making based on research patterns.

Alex: Exactly! It illustrates the growing power of LLMs to add context and meaning to otherwise dense data.

Maya: Finally, there’s a helpful documentation update in the Google Datachat repo with some fixed links to the Google Cloud Console.

Alex: Even little fixes like these are significant, ensuring users don’t get stuck when setting up bots.

Maya: True! Errors in documentation can cause hours of wasted time during setup.

Alex: So what’s your quick tip for listeners from this week’s updates?

Maya: Here’s a quick tip you can try today: If you use dark/light mode toggle buttons in your app, add code to handle unexpected theme inputs gracefully—like defaulting unknown themes to 'auto' or system preference.

Alex: That’s smart. Maya, how would you use that?

Maya: I’d add validation in the toggle handler to fallback to a safe default. It improves robustness and user experience, preventing weird edge case bugs.

Alex: Great idea! Small safety nets like that can prevent obscure bugs in UI.

Maya: To wrap up, I’ll say: Don’t forget to check out your tooling options; they can make or break your productivity.

Alex: And remember, small tweaks can have a big impact, whether in content sync, UI components, or data transformation.

Maya: That’s all for this week on Anand’s Weekly Codecast.

Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-05-25</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-05-25.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-05-25.mp3</guid>
    <pubDate>Sun, 25 May 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 25 May 2025!

Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: First up, let’s talk about the collection of handy little web apps that Anand runs, mostly Single Page Applications powered by LLMs.

Maya: This week, the big update is a new feature in the GitHub activity summarizer tool—it now recommends users right on the summary page!

Alex: Yes! Instead of just typing a username, you get a fancy dropdown list with interesting user suggestions. It makes exploring GitHub activities more interactive and fun.

Maya: That’s great for folks who want quick inspiration or to check out prominent contributors. It’s like giving you a little nudge on who to look up next.

Alex: Not just that, the summarizer also got a visual refresh with Bootstrap updated for better styling consistency. So it feels cleaner and more polished.

Maya: Also, the podcast generator web app got some solid love—now you can type your own podcast script, easily save your form settings with a nifty library, and you can clear all your saved data with a button.

Alex: I love how these improvements add flexibility—whether you want to craft your own narrative or start from AI-generated scripts, the UI adapts.

Maya: Plus, the podcast generator supports selecting different models and providers, like OpenAI, Azure, or local LLM setups, making it easier to customize your experience.

Alex: Exactly. The behind-the-scenes API changes let you pick any compatible provider, giving people more freedom and control.

Maya: This week also saw robust upgrades to a tiny library that keeps your form inputs saved across reloads, even explaining now how to save password fields safely.

Alex: That’s hugely helpful for web developers wanting forms that “remember” inputs without compromising sensitive fields by default.

Maya: Speaking of forms, there’s an enhancement that lets fields without a name but with an ID get saved too. That covers more use cases, making form persistence more reliable.

Alex: So overall, a push for better user experience consistency across tools, with solid code and smooth workflows.

Maya: Let’s switch gears to a fascinating new repository—the Story Network app.

Alex: Yes! Anand created a beautiful new visualization tool that shows where people, places, or entities pop up in stories and how they’re connected.

Maya: The big lift here was revamping the homepage to add an engaging introductory jumbotron and a dark mode toggle. Now, it’s both beautiful and friendly to your eyes.

Alex: Small but critical changes made the entity presence visuals more precise: bigger dots on the timelines, better table layout for correlations, and snappy transitions.

Maya: Using Bootstrap’s native colors for both light and dark mode means it’s consistent and accessible, not fiddly with separate themes.

Alex: And the addition of a dark mode toggle inside the navbar is a practical touch. Everyone loves being able to switch between themes easily.

Maya: Also, the app neatly fixed some bugs where entity toggles persisted incorrectly when switching stories. Now it's clean every time you jump back.

Alex: The demo even includes a rich example—the story of Les Misérables, showing all the key characters and their interactions. A great test of the tool’s power.

Maya: Next, let’s talk about the powerhouse tool for comparing large language models by price and performance.

Alex: This week, Anand added a cool new analysis script that fetches real-time throughput stats and calculates “billing rates.” It shows how much it costs per hour to run each LLM model based on tokens processed and token price.

Maya: It’s practical because everyone wonders not just which model is best on benchmarks, but how much it costs to really use one at scale.

Alex: Exactly, and this new script fetches batches of models from OpenRouter’s API, computes averages via efficient batching, and outputs a detailed JSON file with model prices, speeds, and estimated hourly bills.

Maya: Plus, the data was integrated into the main repo with fresh updated model stats—valuing quality alongside cost changes this May.

Alex: That continuous price-quality data helps developers and companies make smart choices balancing budgets and service levels.

Maya: Moving on to another very cool update—Anand’s public course content for Tools in Data Science at IIT Madras.

Alex: Nothing major, but some key formatting fixes in the docs to make reading smoother, plus updated deadlines for assignments.

Maya: That’s always important for students to stay on track, especially for this very rigorous and practical course.

Alex: Next, about the Google Datachat bot—Anand deployed the worker app that connects Google Chat to BigQuery, answering data questions using natural language.

Maya: This neat bot generates SQL queries behind the scenes, runs them against a public ecommerce dataset, then gives easy-to-understand answers right inside your chat.

Alex: Big setup update here was careful management of OAuth tokens, Google Service Account auth for secure queries, plus adding structure to the conversation flow and error handling.

Maya: The architecture and docs in the code explain how to set up the bot, link it with GCP and Cloudflare Workers, and add proper permissions. Perfect for organizations looking to empower users with data insight.

Alex: Now, for our final highlight, Anand refined the generative AI group’s podcast tools.

Maya: Yeah! The script now adds the podcast dialogue text as descriptions in the RSS feed, making each episode’s content more discoverable for listeners.

Alex: Also, the generation switched to using calendar weeks starting Sundays, which matches most people’s week view better.

Maya: Plus, there was a funny correction to the podcast hosts’ introductions to make the conversation sound natural. It helps polish the listening experience.

Alex: Before we sign off, Maya, got a quick pro tip for our listeners?

Maya: Absolutely! Here’s a quick tip you can try today: If you’re dealing with lots of AI agents or workflows calling multiple tools, use intent detection to route requests to the right specialized model or API.

Alex: That’s smart! I’d set up a small filtering layer that picks the best model for each query type—reducing latency and improving accuracy.

Maya: Yes, and it’s easier to tune than trying to train a big model to handle every task optimally.

Alex: Alright, for our wrap-up: Remember, small user experience improvements—like saving form data or adding dark mode toggle—can make a huge difference.

Maya: And don’t forget to keep an eye on real-world costs alongside capabilities when choosing large language models.

Maya: That’s all for this week on Anand’s Weekly Codecast.

Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-05-18</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-05-18.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-05-18.mp3</guid>
    <pubDate>Sun, 18 May 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 18 May 2025!

Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: First up, let’s dive into Anand’s work on that fascinating project testing the mental math skills of large language models.

Maya: Right! This week, Anand improved how the multiplication results from 50 different models are displayed. Now, it shows all responses each model gave in a neat numbered list when you hover over the results.

Alex: That’s such a handy feature. Instead of just seeing a score, you get to peek inside the model’s reasoning or errors. It’s like looking over the shoulder of the AI as it does math.

Maya: Exactly. Plus, the table’s colors now use a smart gradient from red to green so you instantly see which models do well. And all numbers are right-aligned, making the data easier to scan.

Alex: Did you notice he also ran each multiplication test five times to improve reliability? That’s a good practice to smooth out randomness in AI responses.

Maya: Definitely. Repeated measures give you confidence the results reflect true performance, not just lucky guesses. It’s kind of like doing multiple trials in a science experiment.

Alex: So, for our listeners, this means Anand’s showing us thoughtful ways to evaluate AI math skills, making the complex data intuitive and transparent.

Maya: Moving on, Anand also made some neat updates to his personal website that lists his GitHub repositories.

Alex: Yes! Now, when you click on a repo card, it opens the app’s homepage if it exists, and the footer links to the GitHub repo and stargazers. It’s a slick UX upgrade.

Maya: Plus, he made sure repos without any assigned topics still show up. That avoids missing interesting projects just because they lack tags.

Alex: Such little refinements really enhance discoverability and navigation for visitors. This shows how attention to small details matters.

Maya: On the education front, Anand updated his "Tools in Data Science" course content.

Alex: That’s right. The README now includes new teaching assistants added to the team, which is great for student support.

Maya: And he added fresh educational material about LLM agents — AI systems that can plan, act, and learn through multi-step reasoning with tools. It’s like giving AI a brain, hands, and memory!

Alex: He also shared a minimal example Python script that acts as a command-line agent. It takes a text task, writes and runs code, then interprets results, retrying if needed.

Maya: That’s a wonderful resource. It gives students a hands-on glimpse into how autonomous AI agents work behind the scenes.

Alex: Also, he fixed the course links so students refer to the right term’s content, like January 2025’s modules.

Maya: Speaking of tools, Anand added a cool WhatsApp thread viewer web app in his tools collection.

Alex: Yes! It takes JSON data scraped from WhatsApp chats and displays messages with quoted replies in a threaded, easy-to-follow layout. That’s great for context.

Maya: Thanks to updates in his WhatsApp scraper too, which now extracts quoted message IDs and message times more accurately. This makes threading possible and reliable.

Alex: And the scraper can handle system messages like message deletions gracefully, making the data cleaner.

Maya: He even improved the bookmarklet for scraping, making it easy for users to drag and use in their browsers.

Alex: Pretty neat! These changes help researchers, analysts, or anyone wanting to explore chat histories with context intact.

Maya: Lastly, Anand updated his workstation setup scripts. He removed Conda from the bash prompt since he doesn’t use it much now.

Alex: He also added new software like Opera browser, ffmpeg, w3m text browser, Google Cloud SDK, PostgreSQL client, Supabase CLI, and VLC for media. It’s a solid development and productivity environment.

Maya: Plus, there’s a handy addition to his fish shell configuration to support better Markdown-to-HTML conversions with GitHub Flavored Markdown extensions.

Alex: That’s awesome—for those of us who write notes or docs in Markdown, better HTML export means cleaner presentations.

Maya: Here’s a quick tip you can try today: When displaying tabular data with varying accuracy or scores like Anand did with the AI models, using color scales and popovers to show detailed info can really improve user experience.

Alex: I agree, Maya. I’d also use that in dashboards where you want to keep summaries concise but allow deep dives on demand.

Maya: So, remember that layering your information lets you serve both quick glances and detailed explorations in one interface.

Alex: Great takeaway! Another one from me: Small improvements like fixing links or adding clear labels can make navigating projects way more pleasant.

Maya: And don’t forget to audit your tooling options often. Adding or trimming software thoughtfully keeps your workflow fresh and efficient.

Maya: That’s all for this week on Anand’s Weekly Codecast.

Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-05-11</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-05-11.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-05-11.mp3</guid>
    <pubDate>Sun, 11 May 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of 11 May 2025!

Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: First up, improvements in the data science tools course content.

Maya: There's now a helpful new video guide showing how to install Windows Subsystem for Linux on Windows 10.

Alex: That’s great because setting up a UNIX-like shell on Windows is often a roadblock for beginners.

Maya: Exactly. The video makes that less intimidating. They also numbered the course modules on the sidebar.

Alex: Organizing content visually helps students get a clearer roadmap of what they need to learn next.

Maya: In addition, guidance was added on how students can obtain and use their OpenAI API keys for LLM work.

Alex: That’s a practical addition to ensure learners can get hands-on experience with LLM APIs without confusion.

Maya: And they're reminding students that the 'llm cmd' feature requires installing the plugin first. Little clarifications like this save a lot of frustration.

Alex: Speaking of LLMs, let's talk about the exciting updates in the large language model evaluations.

Maya: Anand’s team added a detailed article and interactive webpage on "Dealing with Hallucinations by Double-checking" LLM responses.

Alex: Hallucinations are when LLMs confidently provide wrong info, so this approach is about running queries through multiple models.

Maya: Right, by cross-checking predictions from different LLMs and reviewing disagreements, you can drastically cut error rates.

Alex: What surprised me is the math: Two models double-checking reduces errors from about 14% to roughly 4%, with 87% automation saved.

Maya: And adding more models improves accuracy further but with diminishing returns – it's about balancing effort and error risk.

Alex: The fascinating insight is that errors made by different LLMs are mostly independent, so relying on multiple 'unreliable' models makes the system very reliable.

Maya: They even dropped a consistently poor model to keep quality high – shows the importance of monitoring model performance in ensembles.

Alex: Plus, the article includes code and a dataset to reproduce these findings. Transparency and reproducibility matter!

Maya: Also, an image illustrating how effort increases roughly linearly with more models but error diminishes towards zero was added for clarity.

Alex: This is a perfect example of using multiple imperfect tools together to get a near-perfect result. Human reviews only slip in when models disagree, saving lots of time.

Maya: Now, switching gears, there's a major breakthrough in the Retrieval Augmented Generation (RAG) project relying on Google Cloud SQL.

Alex: Yes! They revamped the backend code to use Python 3.13, with asyncpg managing a Postgres DB enhanced with a vector search extension.

Maya: This vector search enables embedding-based similarity lookups, combined with classic text search for efficient hybrid retrieval.

Alex: What’s brilliant is the design of a hybrid_search function mixing TF-IDF style text relevance and cosine similarity on embeddings.

Maya: This mix helps capture relevant documents even when keywords don’t match exactly but the meaning is similar.

Alex: There's a detailed setup guide with Google Cloud CLI commands to configure the database and indexes, even a hybrid scoring function written in SQL.

Maya: The FastAPI app supports uploading chunks of text, generates embeddings with OpenAI API, stores them, and queries with that hybrid method.

Alex: They even added an answer endpoint that fetches relevant chunks and prompts an LLM to create grounded answers citing source text.

Maya: Plus, there’s a thorough README on deploying this as a Cloud Run service with full local testing instructions. Impressive end-to-end design.

Alex: I love how well it integrates modern vector search with familiar Postgres infrastructure.

Maya: They also improved the Docker setup, upgraded dependencies, and tweaked code style for better maintainability.

Alex: Lastly, the AI Pipe project got a nice update.

Maya: Yeah, they enabled full support for OpenAI embeddings API via the AI Pipe proxy.

Alex: That means you can call OpenAI embedding endpoints through AI Pipe, keeping usage within budget and tracking costs.

Maya: Plus, they improved headers sent to OpenRouter so it can identify the app source, helping monitor usage better.

Alex: The README got more examples, showing how to set `OPENAI_API_KEY` and `OPENAI_BASE_URL` to use AI Pipe from curl or the `llm` CLI.

Maya: Their test suite was expanded to verify embedding API requests and cost calculations too. Robust testing is always a plus.

Alex: So, a tip for listeners: If you’re juggling multiple LLM models, try incorporating double-checking in your workflows to catch hallucinations early.

Maya: Exactly! Alex, how would you apply that in your projects or daily coding?

Alex: I'd run critical queries through two or more models and only flag for review when they disagree. It’s a smart shortcut to higher accuracy without excessive manual checks.

Maya: That’s a great approach! Remember, small tweaks like double-checking and organizing learning paths can have big impact.

Alex: And don’t forget to explore and optimize your tooling options—they often pay off.

Maya: That’s all for this week on Anand’s Weekly Codecast.

Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-05-04</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-05-04.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-05-04.mp3</guid>
    <pubDate>Sun, 04 May 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of May 3rd, 2025!  
Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: First up, let's talk about the scripts that power a streamlined coding environment.  
Maya: Right! This week, the key change was decluttering the fish shell startup by avoiding the permanent `fish_add_path` and using a more straightforward `set -gx PATH` approach instead.  
Alex: That’s clever because it makes your PATH variable setup more stable and less error-prone every time you open a terminal.  
Maya: Plus, some new virtual environments got added to this PATH setup, like for a tool named “marimo” and “ruff.” More tools ready to go right from the command line!  
Alex: And did you notice they added a new shell abbreviation for quickly running Node.js using `fnm` without overhead on startup? That's a great speedup.  
Maya: Also, for Linux users, the editor “micro” was added in the setup – a lightweight but powerful terminal editor.  
Alex: These are such practical tweaks that save time and keep your development flow smooth.

Maya: Moving on to the “Tools in Data Science” course content, Anand expanded the LLM-related material.  
Alex: Yeah, there’s a big refresh on image generation and text-to-speech APIs. The Gemini 2.0 Flash model’s image generation is now covered with clear REST examples.  
Maya: And OpenAI’s newest GPT Image 1 model for creating and editing high-fidelity images is also included with easy-to-use curl commands.  
Alex: This makes it much easier for students to experiment with state-of-the-art multimodal AI capabilities right from their APIs.  
Maya: The course also added a detailed guide on OpenAI’s Text-to-Speech API and Google Gemini’s advanced speech studio services.  
Alex: That’s huge for anyone wanting to add voice or audio features to their apps or projects!  
Maya: They even include cost details and tips for optimizing usage, which beginners often miss.  
Alex: Aside from the API deep dives, the course updated links and added easy access to graded assignments and discussion threads. Super useful for students to stay on track.

Alex: There was also a general note that the course is open to anyone wanting to explore the materials and evaluations but with some participation restrictions.  
Maya: That's thoughtful—letting others audit the content while maintaining grading control for enrolled students.  
Alex: Plus, important new content was added around GitHub Codespaces and Google Authentication with FastAPI.  
Maya: Those help developers set up fast cloud-based coding environments and secure API logins using Google accounts.  
Alex: Makes setting up your development workflow and apps smoother than ever.

Maya: Now, about the LLM mental math evaluations—Anand added some new models called “Grok 3” into the mix and improved how results pop up with detailed explanations on hover.  
Alex: I love that! It’s like seeing the AI’s thought process, not just the final result.  
Maya: They showed that OpenAI’s reasoning models essentially cracked mental multiplication up to 7-digit numbers with impressive human-like strategies.  
Alex: So, the models aren’t just spitting answers but using math tricks to get there. Amazing!  
Maya: Plus, 16 models including Gemini, Anthropic, Grok, and Llama now get nearly half of the multiplication questions right. Watching this space is exciting.

Alex: In the tooling repos, “asyncLLM” got enhanced with support for OpenAI’s new Responses API which streams outputs and function calls more fluidly.  
Maya: This means developers can now handle more complex AI interactions like multi-tool calls or detailed incremental responses with simple async iterations.  
Alex: It’s a big step toward building interactive and responsive AI-powered apps.  
Maya: Especially helpful for integrations where you want to see outputs as they come, rather than waiting for the whole response.

Maya: Shifting gears, Anand also improved the document assessor tool—a browser-based LLM app to check clauses in uploaded files like PDFs and Word docs.  
Alex: The update modularized heavy libraries like PDF.js and Mammoth.js to load only when needed.  
Maya: Plus, they added input validation and sanitized user content to prevent errors and security holes.  
Alex: All solid engineering moves to keep the tool fast and safe, especially for real-world usage by legal or HR teams.  
Maya: And they even created a slick UI to show evaluations and let you deep-dive into results with citations.

Alex: Last but not least, in the personal scripts repo, a new script named “git-uncommitted” was added.  
Maya: It scans your folders to flag which ones have uncommitted changes or need pushing to remote — helping keep your codebases clean and synced.  
Alex: Those little helper scripts are the unsung heroes that save headspace and avoid embarrassing code slip-ups.  
Maya: Definitely. There was also a fix to correctly show a 2-day agenda in gcalcli, more Linux setup notes, and an enhancement to generate a heavy PDF for stress-testing.  
Alex: A week full of practical tweaks and rich AI content updates. Perfect!

Maya: Here's a quick tip you can try today: When working with APIs posting large requests, lazy-load your heavy libraries only when you really need them, and validate inputs thoroughly.  
Alex: That’s smart. How would you use that in your own projects, Maya?  
Maya: I'd implement on-demand dynamic imports for UI tools like PDF or image processors, so the app loads lightning fast initially and stays secure with strict file checks. It’s a solid usability and reliability win.

Alex: What I take away this week is to never underestimate how small enhancements—like shell path tweaks or better input validation—can really smooth out a developer’s day.  
Maya: And I’m reminded to always look for ways to integrate the newest AI features thoughtfully, like streaming APIs and multi-tool calls that make interactions richer and apps more fun to build.  
Maya: That’s all for this week on Anand’s Weekly Codecast.  
Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-04-27</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-04-27.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-04-27.mp3</guid>
    <pubDate>Sun, 27 Apr 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of April 27, 2025!  
Maya: We’re Alex and Maya, here to guide you through some fascinating updates from Anand’s GitHub projects this week.

Alex: Let’s start with Anand’s mental math evaluations using AI models.  
Maya: The big advancement here? Documenting how 50 different AI models handle multiplying large numbers.  
Alex: Who thought AI could try mental math at all? But this shows they’re not quite calculators yet.  
Maya: Exactly! What’s cool is that some of the best models, like OpenAI’s reasoning variants, got six of seven problems right.  
Alex: That’s huge! These models use human-like tricks to break down big calculations — kind of like doing math in steps.  
Maya: And the evaluation now includes setup tips for API keys, making it easier for others to try. Why do you think adding setup instructions matters?  
Alex: It lowers the barrier for other developers to replicate or improve on the tests, which helps the whole AI community.

Maya: Next up, Anand polished the homepage that features all his projects.  
Alex: Yep, the list now groups repos by topic and shows usage stats, stars, and updated dates.  
Maya: It also has handy filters so you can find projects by what you’re interested in or when they were updated—making discovery much smoother.  
Alex: This is like giving a well-organized portfolio to anyone visiting the site.  
Maya: And a fresh script handles the page’s HTML generation and keeps things tidy with Bootstrap styling.  
Alex: What kind of user benefits can you see from this?  
Maya: Anyone can quickly spot active and relevant projects without sifting through heaps of info.

Alex: Speaking of visuals, there’s a slick update to the Marp slide plugin for SmartArt diagrams.  
Maya: Anand made the plugin modular and modern — now it supports Pyramid, Chevron, and Venn diagrams all in one go.  
Alex: Plus, it’s compatible with the Marp CLI, so you can create stylish visuals right from Markdown files easily.  
Maya: There’s even a new frontend app that lets you input your content and see slides instantly in your browser!  
Alex: That definitely helps presenters make their slides look more engaging, without needing complex graphic design tools.  
Maya: Why do you think integrating with Markdown and CLI tools is important?  
Alex: It keeps the workflow fast and text-based, perfect for developers and tech-savvy users who like coding their presentations.

Maya: Switching gears, the Rewriter app got a big refresh too.  
Alex: Yup, the app’s UI now relies on Bootstrap and Bootstrap Icons for a cleaner, responsive look.  
Maya: It includes handy preset rewriting scenarios like polishing emails or simplifying technical docs you can pick with a click.  
Alex: Plus, the bookmarklet generator is simplified and more modular, letting users create custom text-rewrite tools with their own API keys and instructions.  
Maya: This is brilliant for anyone wanting instant, AI-powered text improvements on any webpage.  
Alex: Adding use cases also inspires users on how to apply it in real life, like boosting customer support or global team communication.  
Maya: How does such a bookmarklet empower everyday users?  
Alex: It puts powerful AI help just a bookmark click away, anywhere on the web—no need to switch apps or copy-paste.

Maya: Finally, Anand’s scripts and system setup got nice usability and environment improvements.  
Alex: Fish shell setups are faster and cleaner, with better virtualenv path handling and fewer slow startup tasks.  
Maya: Command abbreviations like ‘codex’ and ‘clip’ make common tasks faster. Also, added useful tools like ‘lynx’, ‘ngrok’, and a handy ‘md2rtf’ script for Markdown conversions.  
Alex: And the Linux setup notes now reflect real-world tweaks, like switching back to X11 for compatibility and handling gesture controls better.  
Maya: Small system improvements like these often save tons of time and reduce frustration every day.  
Alex: What’s your favorite benefit of optimizing your dev environment?  
Maya: Peace of mind and smoother workflows—so you focus on coding, not fighting your tools.

Maya: Here’s a quick tip you can try today — from the Rewriter updates, check out creating custom bookmarklets with tailored rewriting instructions.  
Alex: That’s clever! I’d use it to create a bookmarklet for quick tone adjustments before sending important emails. What about you?  
Maya: I’d make one for instant technical jargon simplification, helping me share clearer docs faster.

Alex: Remember, small tweaks can have big impact.  
Maya: Don’t forget to explore your tooling options to boost productivity and ease.  
Maya: That’s all for this week on Anand’s Weekly Codecast.  
Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-04-20</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-04-20.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-04-20.mp3</guid>
    <pubDate>Sun, 20 Apr 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of April 14th to 20th, 2025!  
Maya: We’re Alex and Maya, and today we’ll walk you through Anand’s coding highlights this week.

Alex: First up, let’s talk about the project that creates an interactive visualization of what’s on the other side of the Earth.  
Maya: The big update was adding detailed learnings to the setup, emphasizing how to ask AI models for final outputs instead of code directly.  
Alex: That’s smart! It makes AI feel more like your programming environment than just a coder.  
Maya: Exactly, and there’s an important note about edge cases too—like countries straddling the prime meridian causing tricky bugs.  
Alex: Those are the kinds of things even some programmers underestimate, but real-world data always has these quirks.  
Maya: What I found interesting is the use of mature geospatial libraries that make complex geometry operations concise and reliable, like using `.difference()` for map shapes.  
Alex: It’s amazing how concise code becomes when you leverage the right tools, right?  
Maya: Plus, they fixed the links to cloud-based interactive maps, making it easier for folks to explore these data visualizations hands-on.

Alex: Switching gears, let’s cover Anand’s AI Pipe project, which now got admin powers!  
Maya: Right! They added admin APIs for fetching usage of all users and generating tokens for any user — making backend management much smoother.  
Alex: That’s a powerful upgrade, especially combined with tests that confirm these features work well.  
Maya: And they also added the ability for admins to overwrite cost data for specific users on specific days. That helps correct billing or usage issues promptly.  
Alex: Sounds like they really ramped up the operational controls in this AI backend.  
Maya: Yep! It’s a great reminder that managing usage and access can be as important as building the AI features themselves.

Alex: Now, Anand’s “Auto Improve” project has some stunning work too!  
Maya: The standout is a series of progressive refinements for web apps, like an interactive circle drawer that now supports dragging, color picking, resizing, and smooth transitions.  
Alex: And they kept pushing it further—adding animated SVG designs that go from simple grids to dynamic cosmic explosions with vibrant gradients and pulsating sparks.  
Maya: That’s a perfect showcase of how repeated AI-powered improvements can create intricate, engaging visuals starting from basic sketches.  
Alex: Plus, their analog clock app went through multiple dramatic makeover stages—from simple tick marks to a futuristic neon glow with smoothly animated hands and a glowing pulsating core.  
Maya: I love the dashboard too! It evolved from basic static charts to a modern, animated data universe with real-time stats, slick fonts, and colorful charts.  
Alex: The fractal explorer also matured into a powerful tool with zoom, pan, smooth color maps, and advanced UI controls for color mode and iterations.  
Maya: And let’s not forget their particle system transforming into an adaptive particle explosion with color shifts, momentum, and interactive mouse repulsion. Pure animation magic!  
Alex: Such thoughtful layering and features all thanks to incrementally pushing the AI’s output.

Maya: Here’s a quick tip you can try today. When improving UI with AI, try to iterate in small steps. For example, starting from a simple shape, ask the model repeatedly to “improve the app dramatically,” adding features and styling gradually.  
Alex: That’s cool! It’s like applying agile updates powered by AI. I’ll try that next time I need a quick UI boost.

Alex: To wrap up, remember—small tweaks can have big impact.  
Maya: And don’t forget to check out your tooling options—they can dramatically simplify complex workflows.  
Maya: That’s all for this week on Anand’s Weekly Codecast.  
Alex: See you next time!

]]></description>
  </item>
  <item>
    <title>Week of 2025-04-13</title>
    <enclosure url="https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-04-13.mp3" length="0" type="audio/mpeg"/>
    <guid>https://github.com/sanand0/sanand0/releases/download/main/podcast-2025-04-13.mp3</guid>
    <pubDate>Sun, 13 Apr 2025 00:00:00 GMT</pubDate>
    <description><![CDATA[
Alex: Hello and welcome to Anand’s Weekly Codecast for the week of April 7th, 2025!  
Maya: We’re Alex and Maya, and today we’ll walk you through the highlights of Anand’s commits this week.

Alex: First up, the eBook publishing journey...  
Maya: Anand wrapped up his quick guide on publishing an eBook on Amazon.  
Alex: What caught my eye is he added the actual Amazon sales link and included the ePub version right in the repo!  
Maya: That means readers can either buy directly or download to read right away. Nice touch for accessibility.  
Alex: Exactly! Plus, the steps remain super practical – from setting up Kindle Direct Publishing to using ChatGPT for cover art.  
Maya: It’s impressive how open-source tools and LLMs speed up what used to be a tedious process.  
Alex: Makes you realize publishing is really just a few scripting tricks away.

Maya: Speaking of tricks, there’s also progress in the LLM pricing info.  
Alex: Yeah, a small fix to deploy on GitHub. The backend nitty-gritty that keeps things smooth.  
Maya: Reliability on details like these is why comparing LLM cost and quality stays up-to-date.  
Alex: True, even the best models need a sturdy base.

Alex: Shifting gears, the smart art diagrams now have a big upgrade!  
Maya: Yes, a new Marp plugin adds slick custom pyramid, chevron, and Venn diagrams.  
Alex: So no fuss creating professional diagrams inside markdown slides—just code blocks and you’re done.  
Maya: And each diagram is configurable with colors, sizes, and even fonts, making presentations so much richer.  
Alex: What’s your favorite? The chevrons for process flows?  
Maya: Definitely! Those arrow-shaped steps look so clean and intuitive.  
Alex: It’s great for anyone, even without graphic design skills, to communicate ideas clearly.  
Maya: The fact that it seamlessly coexists with Mermaid diagrams is a big win for flexibility too.

Maya: In personal tools, Anand improved his setup scripts once more.  
Alex: He added the path to the Gramex virtual environment, so it runs smoothly on multiple shells — bash and fish across Linux and Windows.  
Maya: Plus, updated the Linux notes with some neat things — fixed Foliate eBook reader on Wayland, and some new keyboard shortcuts for Guake and Warp.  
Alex: That’s the kind of polish that makes daily work frictionless.  
Maya: Every little tweak compounds over time.

Alex: Now, the most fun—Anand’s elimination game visualization.  
Maya: Right! He’s been working on showing how large language models play a Survivor-style game.  
Alex: This week, he added a detailed README with clear usage instructions and lots of screenshots to guide users.  
Maya: Also, navigation got smarter — you can click on alliances, votes, or chat messages to jump through game steps.  
Alex: And they even applied bug fixes to make the UI cleaner, like highlighting chat messages when hovered and improving the arrow styling.  
Maya: It really helps anyone explore the subtle “social” strategies LLMs use under the hood.  
Alex: What did you find fascinating about this?  
Maya: That the visualization turns complex model interactions into understandable stories—sort of like watching AI reality TV!

Maya: And to top it off, there’s exciting progress in the auto-improve repo.  
Alex: This involves prompting an LLM repeatedly to improve code step-by-step.  
Maya: They added new demos, including more games, and smarter code folding – making the output easier to view and interact with.  
Alex: This collaborative LLM coding approach can really boost how quickly we prototype and refine ideas.  
Maya: Have you tried anything like this, Alex?  
Alex: Absolutely! Having an AI iterate over my code saves hours, especially for UI tweaks.

Maya: Here’s a quick tip for our listeners: use smart plugins or snippets to generate diagrams or UI components instead of doing it from scratch.  
Alex: Definitely. It’s a huge time saver—and makes your presentations and apps stand out. How do you use this, Maya?  
Maya: I often start with template generators and customize as I go. It sparks creativity and keeps our flow smooth.

Alex: Well, remember, small tweaks can have big impact.  
Maya: Don’t forget to check out your tooling options—they constantly evolve and can transform your work!  
Maya: That’s all for this week on Anand’s Weekly Codecast.  
Alex: See you next time!

]]></description>
  </item>
</channel>
</rss>